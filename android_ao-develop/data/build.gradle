apply plugin: 'com.android.library'
apply plugin: 'realm-android'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSDK
        targetSdkVersion rootProject.ext.targetSDK
        versionCode rootProject.getVersionCode()
        versionName rootProject.getVersionName()
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dexOptions {
        dexInProcess true
    }

    lintOptions {
        abortOnError false
        disable 'InvalidPackage', 'SdCardPath'
    }
}

dependencies {

    compile "com.android.support:appcompat-v7:${rootProject.ext.androidSupport}"

    compile project(path: ':domain')

    compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    compile "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    compile "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}"
    compile "com.squareup.okhttp3:okhttp:${okHttpVersion}"
    compile "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}"


    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile "junit:junit:${rootProject.ext.junitVersion}"
    testCompile "org.mockito:mockito-core:${rootProject.ext.mockitoVersion}"
    testCompile "org.powermock:powermock-module-junit4:${rootProject.ext.powerMockVersion}"
    testCompile "org.powermock:powermock-api-mockito2:${rootProject.ext.powerMockVersion}"
    compile "io.intercom.android:intercom-sdk:${rootProject.ext.intercomeVersion}"
}
